const express = require("express");
require("./db/mongoose");
const Customers = require("./models/customers");
const jwt = require("jsonwebtoken");
const { v4: uuidv4 } = require('uuid'); //unique id creation

const router = express.Router(); 

const client_secret="customers-bank-api"; //secret key from token team

//verify method to access api with token
const authenticateToken = (req,res,next) => {
    const tokenHeader = req.headers.authorization;
  
    if (!tokenHeader) {
      return res.status(401).send("token required to access api");
    }
    const token = tokenHeader.split(" ")[1];
  
    jwt.verify(token, client_secret, async (err, decoded) => {
      if (err) {
        return res.status(401).send("Invalid token");
      }
      req.customers = decoded;
      next();
    });
}
  
//post method to save single customer data in database at once
 router.post("/customers",authenticateToken, async (req, res) => {
    let {customerId,email}=req.body;
    //console.log(customerId);

    if (!customerId){
      customerId = uuidv4();// generate a new customerId if it's not provided
      req.body.customerId=customerId;// update req.body with the new customerId
    }
    try {
      const existingCustomer = await Customers.findOne({ $or: [{ customerId },{ email }] });
      if(existingCustomer){
        return res.status(400).send({error: "customer already exists"});
      }
      const customers = new Customers(req.body);
      await customers.save();
      res.status(201).send(customers);
      console.log("data saved successfully");
    } catch (e) {
      if(e.message==="customer already exist"){
        return res.status(400).json({error:e.message});
       // if (e.code === 11000) { // check if error is due to duplicate key (customer already exists)
      //return res.status(400).send({ error: "customer already exists" });
      }
      else{
        res.status(400).send(e); 
      }
    }
  });


  //post method to save  multiple customers data in database at once

 /* router.post("/customers",authenticateToken, async (req, res) => {
    let customers=req.body;

    customers.forEach((customer) => {
      if (!customer.customerId){
      customer.customerId = uuidv4();// generate a new customerId if it's not provided
      console.log("customerId:",customer.customerId);
      }
    });

    try {
      //check for existing customers
      const existingCustomers = await Customers.findOne({customerId:req.body[0].customerId})
      if(existingCustomers){
        return res.status(400).send({error: "customer already exists"});
      }
      //insert multiple customers
      const customersResult = await Customers.insertMany(customers);
      //await customers.save();
      res.status(201).send(customersResult);
      //console.log(customersResult);
      //console.log("data saved successfully");

    } catch (e) {
      res.status(400).send(e);
    }
  });*/

  //get method to fetch customers data using email or customer id
  router.get("/customers",authenticateToken,async(req,res)=>{
  const {customerId,email}=req.query;
  if (!customerId && !email) {
    return res.status(404).json({ error: "Either customer ID or email is required" });
  }
  try {
    let customers;
    if (customerId) {
      customers = await getCustomerById(customerId);
      if (customers.length === 0) {
        return res.status(404).json({ error: "Invalid customer ID" });
      }
    } else {
      customers = await getCustomerByEmail(email);
    }

    if (customers.length === 0) {
      return res.status(404).json({ message: "No customers found" });
    }
       res.send(customers);
  }catch (e) {
    if(e.message==="invalid customer Id"||e.message==="Customer not found"){
      return res.status(404).json({error:e.message});
      }
    else if(e.message==="InvalidIdError"){
      return res.status(400).json({error:e.message});
        }
    else{
      return res.status(500).json({error:"Internal Server Error"});
    }
  }
});

//function getcustomerById
async function getCustomerById(customerId){
  const customer = await Customers.findOne({customerId:customerId});
  if (!customer || customer === null){
    throw new Error("Customer not found");
    }
    return customer;  
}

//function getCustomerByEmail
async function getCustomerByEmail(email){ 
  const filter = {};
  if (email){
    filter.email = email;
    }  
    const customers = await Customers.find(filter).select();
    return customers;
}

// fetching customer data using id generated by mongodb
router.get("/customers/:id",authenticateToken, async (req, res) => {
  const _id = req.params.id;

  try {
    const customer = await Customers.findById(_id);

    if (!customer) {
      return res.status(404).send();
    }

    res.send(customer);
  } catch (e) {
    res.status(500).send();
  }
});
    
  //exporting router to use in another files
  module.exports=router;